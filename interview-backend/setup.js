#!/usr/bin/env node

/**
 * AI Interview Platform Setup Script
 * 
 * This script helps you quickly set up the configuration for your AI Interview platform.
 * Run: node setup.js
 */

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

console.log('🚀 AI Interview Platform Configuration Setup');
console.log('===========================================\n');

const config = {
  environment: 'development',
  openaiKey: '',
  geminiKey: '',
  port: '3001',
  corsOrigin: '*',
  maxQuestions: '5',
  features: {
    adaptiveQuestions: 'true',
    mcqSupport: 'true',
    audioProcessing: 'true',
    voiceGeneration: 'true',
    llmAnalysis: 'true'
  }
};

function ask(question) {
  return new Promise((resolve) => {
    rl.question(question, (answer) => {
      resolve(answer.trim());
    });
  });
}

async function setupConfiguration() {
  try {
    console.log('📋 Basic Configuration');
    console.log('=====================\n');

    // Environment
    const env = await ask('Environment (development/staging/production) [development]: ');
    config.environment = env || 'development';

    // API Keys
    console.log('\n🔑 API Keys (Required)');
    console.log('=====================');
    
    config.openaiKey = await ask('OpenAI API Key: ');
    if (!config.openaiKey) {
      console.log('❌ OpenAI API Key is required');
      process.exit(1);
    }

    config.geminiKey = await ask('Gemini API Key: ');
    if (!config.geminiKey) {
      console.log('❌ Gemini API Key is required');
      process.exit(1);
    }

    // Server Settings
    console.log('\n🌐 Server Configuration');
    console.log('======================');
    
    const port = await ask('Server Port [3001]: ');
    config.port = port || '3001';

    if (config.environment === 'production') {
      const corsOrigin = await ask('CORS Origin (e.g., https://yourdomain.com) [*]: ');
      config.corsOrigin = corsOrigin || '*';
    }

    // Assessment Settings
    console.log('\n📝 Assessment Configuration');
    console.log('===========================');
    
    const maxQuestions = await ask('Maximum questions per assessment [5]: ');
    config.maxQuestions = maxQuestions || '5';

    // Features
    console.log('\n🎯 Feature Configuration');
    console.log('========================');
    
    const adaptiveQuestions = await ask('Enable adaptive questioning? (y/n) [y]: ');
    config.features.adaptiveQuestions = (adaptiveQuestions.toLowerCase() === 'n') ? 'false' : 'true';

    const mcqSupport = await ask('Enable MCQ (Multiple Choice) questions? (y/n) [y]: ');
    config.features.mcqSupport = (mcqSupport.toLowerCase() === 'n') ? 'false' : 'true';

    const audioProcessing = await ask('Enable audio processing? (y/n) [y]: ');
    config.features.audioProcessing = (audioProcessing.toLowerCase() === 'n') ? 'false' : 'true';

    if (config.features.audioProcessing === 'true') {
      const voiceGeneration = await ask('Enable voice generation (TTS)? (y/n) [y]: ');
      config.features.voiceGeneration = (voiceGeneration.toLowerCase() === 'n') ? 'false' : 'true';
    } else {
      config.features.voiceGeneration = 'false';
    }

    const llmAnalysis = await ask('Enable LLM-powered response analysis? (y/n) [y]: ');
    config.features.llmAnalysis = (llmAnalysis.toLowerCase() === 'n') ? 'false' : 'true';

    // Advanced Settings for Production
    if (config.environment === 'production') {
      console.log('\n🛡️ Production Security Settings');
      console.log('===============================');
      
      const rateLimiting = await ask('Enable rate limiting? (y/n) [y]: ');
      config.rateLimiting = (rateLimiting.toLowerCase() === 'n') ? 'false' : 'true';

      const apiKeyAuth = await ask('Enable API key authentication? (y/n) [y]: ');
      config.apiKeyAuth = (apiKeyAuth.toLowerCase() === 'n') ? 'false' : 'true';

      if (config.apiKeyAuth === 'true') {
        config.apiKey = await ask('API Key for authentication: ');
      }
    }

    return config;
  } catch (error) {
    console.error('❌ Setup error:', error);
    process.exit(1);
  }
}

function generateEnvFile(config) {
  const envContent = `# AI Interview Platform Environment Configuration
# Generated by setup script on ${new Date().toISOString()}

# ===========================================
# ENVIRONMENT & SERVER CONFIGURATION
# ===========================================
NODE_ENV=${config.environment}
PORT=${config.port}
HOST=localhost
CORS_ORIGIN=${config.corsOrigin}

# ===========================================
# API KEYS (REQUIRED)
# ===========================================
OPENAI_API_KEY=${config.openaiKey}
GEMINI_API_KEY=${config.geminiKey}

# ===========================================
# OPENAI CONFIGURATION
# ===========================================
OPENAI_GPT_MODEL=gpt-4
OPENAI_WHISPER_MODEL=whisper-1
OPENAI_TTS_MODEL=tts-1
OPENAI_VOICE=nova
TTS_SPEED=1.0
WHISPER_TEMPERATURE=0.2

# ===========================================
# GEMINI CONFIGURATION
# ===========================================
GEMINI_MODEL=gemini-1.5-flash
GEMINI_TEMPERATURE=0.7
GEMINI_MAX_TOKENS=2048

# ===========================================
# ASSESSMENT CONFIGURATION
# ===========================================
MAX_QUESTIONS=${config.maxQuestions}
DEFAULT_QUESTIONS=${config.maxQuestions}
QUESTION_TIMEOUT=300000
ADAPTIVE_THRESHOLD=0.6

# MCQ Scoring
MCQ_CORRECT_SCORE=8
MCQ_INCORRECT_SCORE=2
MCQ_MAX_SCORE=10
MCQ_TIME_BONUS_THRESHOLD=0.5
MCQ_TIME_PENALTY_THRESHOLD=2.0

# Text Response Scoring
TEXT_MIN_SCORE=1
TEXT_MAX_SCORE=10
TEXT_DEFAULT_SCORE=5
TEXT_HIGH_THRESHOLD=8
TEXT_MEDIUM_THRESHOLD=5
TEXT_LOW_THRESHOLD=3

# Response Analysis
MIN_RESPONSE_LENGTH=15
MAX_RESPONSE_LENGTH=5000
DETAILED_RESPONSE_THRESHOLD=30

# Timing
TOTAL_ASSESSMENT_TIME=300000
MCQ_ESTIMATED_TIME=60
TEXT_ESTIMATED_TIME=120
QUICK_RESPONSE_THRESHOLD=30

# ===========================================
# INTERVIEW CONFIGURATION
# ===========================================
INTERVIEW_MAX_QUESTIONS=${config.maxQuestions}
INTERVIEW_RESPONSE_TIMEOUT=120000
CLARIFICATION_ATTEMPTS=2
MIN_TRANSCRIPT_LENGTH=5

# Audio Settings
AUDIO_MAX_FILE_SIZE=26214400
AUDIO_FORMATS=audio/webm,audio/wav,audio/mp3,audio/mpeg
AUDIO_CLEANUP_INTERVAL=30000
AUDIO_COMPRESSION=0.8

# TTS Settings
TTS_VOICE=nova
TTS_MODEL=tts-1
TTS_FORMAT=mp3
TTS_MAX_TEXT_LENGTH=500

# STT Settings
STT_MODEL=whisper-1
STT_LANGUAGE=en
STT_TEMPERATURE=0.2
STT_RESPONSE_FORMAT=text

# ===========================================
# FILE STORAGE CONFIGURATION
# ===========================================
UPLOAD_DIR=uploads
AUDIO_DIR=uploads/audio
TEMP_DIR=temp_audio
LOG_DIR=logs

# Cleanup Settings
TEMP_FILE_AGE=300000
CLEANUP_INTERVAL=120000
LOG_FILE_AGE=604800000

# File Size Limits
RESUME_SIZE_LIMIT=10485760
AUDIO_SIZE_LIMIT=26214400
TOTAL_STORAGE_LIMIT=1073741824

# ===========================================
# SECURITY CONFIGURATION
# ===========================================
RATE_LIMIT_ENABLED=${config.rateLimiting || 'false'}
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX=${config.environment === 'production' ? '50' : '100'}
RATE_LIMIT_SKIP_SUCCESS=true

API_KEY_REQUIRED=${config.apiKeyAuth || 'false'}
${config.apiKey ? `API_KEY=${config.apiKey}` : '# API_KEY=your_api_key_here'}
API_KEY_HEADER=x-api-key

ENCRYPTION_ENABLED=false
ENCRYPTION_ALGORITHM=aes-256-gcm
# ENCRYPTION_KEY=your_encryption_key_here

# ===========================================
# LOGGING CONFIGURATION
# ===========================================
LOG_LEVEL=${config.environment === 'production' ? 'warn' : config.environment === 'staging' ? 'info' : 'debug'}
CONSOLE_LOGGING=${config.environment !== 'production' ? 'true' : 'false'}
FILE_LOGGING=${config.environment === 'production' ? 'true' : 'false'}
LOG_FILENAME=ai-interview.log
LOG_MAX_SIZE=10MB
LOG_MAX_FILES=5

# ===========================================
# PERFORMANCE CONFIGURATION
# ===========================================
CACHING_ENABLED=${config.environment === 'production' ? 'true' : 'false'}
CACHE_TTL=3600
CACHE_MAX_SIZE=100

COMPRESSION_ENABLED=${config.environment === 'production' ? 'true' : 'false'}
COMPRESSION_LEVEL=${config.environment === 'production' ? '9' : '6'}
COMPRESSION_THRESHOLD=1024

CLUSTERING_ENABLED=false
CLUSTER_WORKERS=4

# ===========================================
# MONITORING CONFIGURATION
# ===========================================
HEALTH_CHECK_ENABLED=true
HEALTH_CHECK_ENDPOINT=/health
HEALTH_CHECK_TIMEOUT=5000

METRICS_ENABLED=${config.environment === 'production' ? 'true' : 'false'}
METRICS_ENDPOINT=/metrics
METRICS_INTERVAL=30000

# ===========================================
# FEATURE FLAGS
# ===========================================
# Assessment Features
FEATURE_ADAPTIVE_QUESTIONS=${config.features.adaptiveQuestions}
FEATURE_MCQ_SUPPORT=${config.features.mcqSupport}
FEATURE_TIME_TRACKING=true
FEATURE_LLM_ANALYSIS=${config.features.llmAnalysis}

# Interview Features
FEATURE_AUDIO_PROCESSING=${config.features.audioProcessing}
FEATURE_REALTIME_TRANSCRIPTION=${config.features.audioProcessing}
FEATURE_VOICE_GENERATION=${config.features.voiceGeneration}
FEATURE_CONVERSATIONAL_FLOW=true

# Experimental Features
FEATURE_VIDEO_INTERVIEW=false
FEATURE_MULTI_LANGUAGE=false
FEATURE_REALTIME_ANALYSIS=false

# ===========================================
# ERROR HANDLING
# ===========================================
MAX_RETRIES=3
RETRY_DELAY=1000
FALLBACK_ENABLED=true
GRACEFUL_SHUTDOWN=true

CRASH_REPORTING=false
CRASH_REPORTING_SERVICE=sentry
# CRASH_REPORTING_DSN=your_sentry_dsn_here
`;

  return envContent;
}

function createDirectories() {
  const directories = [
    'uploads',
    'uploads/audio',
    'temp_audio',
    'logs'
  ];

  directories.forEach(dir => {
    if (!fs.existsSync(dir)) {
      fs.mkdirSync(dir, { recursive: true });
      console.log(`📁 Created directory: ${dir}`);
    }
  });
}

function showSummary(config) {
  console.log('\n✅ Configuration Summary');
  console.log('========================');
  console.log(`Environment: ${config.environment}`);
  console.log(`Port: ${config.port}`);
  console.log(`Max Questions: ${config.maxQuestions}`);
  console.log(`Adaptive Questions: ${config.features.adaptiveQuestions}`);
  console.log(`MCQ Support: ${config.features.mcqSupport}`);
  console.log(`Audio Processing: ${config.features.audioProcessing}`);
  console.log(`Voice Generation: ${config.features.voiceGeneration}`);
  console.log(`LLM Analysis: ${config.features.llmAnalysis}`);
  
  if (config.environment === 'production') {
    console.log(`Rate Limiting: ${config.rateLimiting}`);
    console.log(`API Key Auth: ${config.apiKeyAuth}`);
  }
}

function showNextSteps() {
  console.log('\n🚀 Next Steps');
  console.log('=============');
  console.log('1. Review your .env file and adjust any settings as needed');
  console.log('2. Install dependencies: npm install');
  console.log('3. Start your server: npm start');
  console.log('4. Test the health endpoint: http://localhost:' + config.port + '/health');
  console.log('5. Check the configuration endpoint (development only): http://localhost:' + config.port + '/config');
  
  console.log('\n📚 Useful Commands');
  console.log('==================');
  console.log('View configuration: GET /config (development only)');
  console.log('Health check: GET /health');
  console.log('Start assessment: POST /start-assessment');
  console.log('Audio transcription: POST /api/transcribe-whisper');
  
  if (config.environment === 'production') {
    console.log('\n⚠️ Production Notes');
    console.log('===================');
    console.log('- Store API keys securely (consider using environment secrets)');
    console.log('- Set up proper monitoring and logging');
    console.log('- Configure SSL/TLS certificates');
    console.log('- Set up database backups (if using database features)');
    console.log('- Configure reverse proxy (nginx/apache)');
  }
}

async function main() {
  try {
    const setupConfig = await setupConfiguration();
    
    console.log('\n📝 Generating configuration files...');
    
    // Generate .env file
    const envContent = generateEnvFile(setupConfig);
    fs.writeFileSync('.env', envContent);
    console.log('✅ Generated .env file');
    
    // Create necessary directories
    createDirectories();
    
    // Show summary
    showSummary(setupConfig);
    
    // Show next steps
    showNextSteps();
    
    console.log('\n🎉 Setup completed successfully!');
    console.log('Your AI Interview platform is ready to run.');
    
  } catch (error) {
    console.error('❌ Setup failed:', error);
    process.exit(1);
  } finally {
    rl.close();
  }
}

// Check if config files already exist
if (fs.existsSync('.env')) {
  console.log('⚠️ Warning: .env file already exists');
  rl.question('Do you want to overwrite it? (y/n): ', (answer) => {
    if (answer.toLowerCase() === 'y') {
      main();
    } else {
      console.log('Setup cancelled. Your existing configuration is preserved.');
      rl.close();
    }
  });
} else {
  main();
}

// Handle process termination
process.on('SIGINT', () => {
  console.log('\n\n👋 Setup interrupted. Your configuration may be incomplete.');
  rl.close();
  process.exit(0);
});